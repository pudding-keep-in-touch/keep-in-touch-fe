/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['AppController_getHello']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/health': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['HealthController_check']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v1/users/{userId}/home': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * 유저 홈 화면 조회
     * @description 유저 홈 화면 조회
     */
    get: operations['UsersController_getUserHome']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v1/users/{userId}/direct-messages': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * 유저 id 기준 받은/보낸 쪽지 리스트 조회 하기
     * @description 유저 id 기준 받은/보낸 쪽지 리스트 조회 하기
     */
    get: operations['UsersController_getDmListByUserId']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v1/users/{userId}/withdraw': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    /**
     * 회원 탈퇴
     * @description 현재 로그인한 사용자의 계정을 탈퇴 처리합니다.
     */
    delete: operations['UsersController_withdrawUser']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v1/direct-messages/{directMessageId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * 메시지 상세 조회
     * @description 메시지 id 기준 받은/보낸 쪽지 상세 조회
     */
    get: operations['DirectMessagesController_getDmDetail']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v1/direct-messages': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * 쪽지 전송
     * @description 받는 사람 가입 email로 쪽지 보내기
     */
    post: operations['DirectMessagesController_createDm']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v1/auth/google/login': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * 구글 로그인
     * @description Swagger에서 테스트 할 수 없습니다. http://localhost:3000/v1/auth/google/login 으로 테스트 해주세요.
     */
    get: operations['AuthController_googleLogin']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/v1/auth/google/callback': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * 구글 로그인 콜백
     * @description Swagger에서 테스트 할 수 없습니다. http://localhost:3000/v1/auth/google/callback 으로 테스트 해주세요.
     */
    get: operations['AuthController_googleLoginCallback']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
}
export type webhooks = Record<string, never>
export interface components {
  schemas: {
    BaseResponseDto: {
      /**
       * @description 상태값
       * @example 200
       */
      status: number
      /**
       * @description 메세지
       * @example Ok
       */
      message: string
      /** @description 실제 사용하는 데이터 전문 */
      data: Record<string, never>
    }
    EmotionDto: {
      /**
       * @description 감정 이름
       * @example 행복
       */
      name: string
      /**
       * @description 감정 이모지
       * @example 😊
       */
      emoji: string
    }
    ResponseGetDmListByUserIdDto: {
      /**
       * @description 쪽지 ID
       * @example 1
       */
      id: number
      /**
       * @description 보낸 사람 ID
       * @example 2
       */
      senderId: number
      /**
       * @description 받는 사람 ID
       * @example 3
       */
      receiverId: number
      /**
       * @description 쪽지 내용
       * @example 안녕하세요, 잘 지내시나요?
       */
      content: string
      /** @description 감정 정보 */
      emotion: components['schemas']['EmotionDto']
      /**
       * @description 댓글
       * @example null
       */
      comment: Record<string, never>
      /**
       * @description 읽음 여부
       * @example false
       */
      isRead: boolean
      /**
       * @description 생성 시간
       * @example 2024-09-15T10:30:00Z
       */
      createdAt: string
    }
    ResponseGetFriendDto: {
      /**
       * @description 친구 id
       * @example 1
       */
      id: number
      /**
       * @description 친구 닉네임
       * @example 친구
       */
      nickname: string
    }
    ResponseGetUserHomeDto: {
      /**
       * @description 현재 home url이 로그인한 유저인지 판별하는 값
       * @example true
       */
      isOwner: boolean
      /** @description 쪽지 리스트 */
      dmList: components['schemas']['ResponseGetDmListByUserIdDto'][] | null
      /** @description 친구 정보 */
      friendUser: components['schemas']['ResponseGetFriendDto'] | null
    }
    CreateDmDto: {
      /**
       * @description 보낸 사람 id
       * @example 1
       */
      senderId: number
      /**
       * @description 받는 사람 가입 이메일
       * @example user@example.com
       */
      receiverEmail: string
      /**
       * @description 감정 이름(응원과 감사, 솔직한 대화)
       * @example 응원과 감사
       */
      emotionName: string
      /**
       * @description 쪽지 내용
       * @example 사실 너에게 말하고 싶은게 있어
       */
      content: string
    }
    ResponseGoogleCallbackDto: Record<string, never>
  }
  responses: never
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}
export type $defs = Record<string, never>
export interface operations {
  AppController_getHello: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  HealthController_check: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  UsersController_getUserHome: {
    parameters: {
      query?: never
      header?: never
      path: {
        userId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['BaseResponseDto'] & {
            data?: components['schemas']['ResponseGetUserHomeDto']
          }
        }
      }
    }
  }
  UsersController_getDmListByUserId: {
    parameters: {
      query?: {
        /**
         * @description 조회 타입(received: 쪽지 받은, sent: 쪽지 보낸)
         * @example received
         */
        type?: string
        /**
         * @description 조회 할 페이지
         * @example 1
         */
        page?: number
        /**
         * @description 조회 갯수
         * @example 10
         */
        limit?: number
        /**
         * @description 조회 순서(desc: 내림차순, asc: 오름차순)
         * @example desc
         */
        order?: string
      }
      header?: never
      path: {
        userId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['BaseResponseDto'] & {
            data?: components['schemas']['ResponseGetDmListByUserIdDto']
          }
        }
      }
    }
  }
  UsersController_withdrawUser: {
    parameters: {
      query?: never
      header?: never
      path: {
        userId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  DirectMessagesController_getDmDetail: {
    parameters: {
      query?: {
        /**
         * @description 조회 타입(received: 쪽지 받은, sent: 쪽지 보낸)
         * @example received
         */
        type?: string
      }
      header?: never
      path: {
        directMessageId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  DirectMessagesController_createDm: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateDmDto']
      }
    }
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  AuthController_googleLogin: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  AuthController_googleLoginCallback: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['BaseResponseDto'] & {
            data?: components['schemas']['ResponseGoogleCallbackDto']
          }
        }
      }
    }
  }
}
